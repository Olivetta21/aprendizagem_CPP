FUNCIONANDO MENOR/MAIOR INCLUSIVE OUTROS MENORES


#include <iostream>
#include <random>
#include <chrono>
using namespace std;


bool INFORMACOES[]{
	false,			//Tamanho do vetor.
	false,			//Mostrar grupo.
	false,			//Mostrar ordem interna.
	true,			//Mostrar vetor secundario.
	true,			//Mostrar passos.
};


//Prototipos das funcoes.-------------------------------------------//

int testeErro(void);
int contarGruposNaoInt(void);
void encontrarLimites(void);
void encontrarMenorEMaior(int);
void mostrarGrupo(int);
void levarMenoresAteVetSecon(void);

//------------------------------------------------------------------//

//Constantes.-------------------------------------------------------//

const int	_tVt = 11, //A fins de testes, o tamanho do vetor, e tamanho do grupo sao 11 e 3.
			_tGp = 3;

const int _tamanhoDoGrupoNaoInt = _tVt % _tGp;
/* 11 MOD 3 = 2 */
const int _qntsGruposInt = _tVt / _tGp;
/* 11/3 = 3.666 = 3 */
const bool _qntsGruposNaoInt = contarGruposNaoInt();
/* 1 */
const int _totalGrupos = _qntsGruposInt + _qntsGruposNaoInt;
/* 3 + 1 = 4 */
int contarGruposNaoInt(void) {
	int qntsGruposNaoInt = 1;	//Soh e possivel existir um grupo nao inteiro.
	if (_tamanhoDoGrupoNaoInt == 0)  qntsGruposNaoInt = 0;	//Se o resto da divisao for zero, entao nao existe grupos nao inteiros.
	return qntsGruposNaoInt;
}

//------------------------------------------------------------------//

//Principais variaveis----------------------------------------------//

int* _vetPrinc = new int[_tVt];
int* _vetSecon = new int[_tVt];

//------------------------------------------------------------------//

//Inicio e fim de cada grupo no vetor.------------------------------//
int* _inicioDoGrupo = new int[_totalGrupos];
int* _fimDoGrupo = new int[_totalGrupos];
void encontrarLimites(void) {
	for (int grupo = 1; grupo < _totalGrupos; grupo++) {
		_inicioDoGrupo[grupo-1] = grupo * _tGp - _tGp;
		/* 2 * 3 = 6 - 3 = 3 */
		_fimDoGrupo[grupo-1] = _inicioDoGrupo[grupo-1] + _tGp - 1;
		/* 3 + 3 = 6 - 1 = 5 */
	}
	_inicioDoGrupo[_totalGrupos - 1] = _totalGrupos * _tGp - _tGp;
	/* 4 * 3 = 12 - 3 = 9 */

	if (_tamanhoDoGrupoNaoInt > 0) {
		_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] - 1 + _tamanhoDoGrupoNaoInt;
		/* 9 - 1 = 8 + 1 = 9 */
		return;
	}

	_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] + _tGp - 1;
	/* 9 + 3 = 12 - 1 = 11 */
}

//------------------------------------------------------------------//

//Encontrar maior e menor de cada grupo-----------------------------//

int* _posisaoDoMenorDoGrupo = new int[_totalGrupos];
int* _menorDoGrupo = new int[_totalGrupos];
int* _maiorDoGrupo = new int[_totalGrupos];
int grupoEsvaziado = 0;

void encontrarMenorEMaior(int outroMenor) {
	int* ordemInternoGrupo = new int[_tGp];
	int* jaPreenchido = new int[_tGp];
	int* antigaPosicaoDaOrdemInterna = new int[_tGp];
	grupoEsvaziado = 0;
	
	for (int i = 0; i < _tGp; i++) {
		ordemInternoGrupo[i] = -9999999;
		antigaPosicaoDaOrdemInterna[i] = -9999999;
	}

	for (int grupo = 1; grupo <= _totalGrupos; grupo++) {	//Fazer o codigo abaixo para cada grupo existente.
		for (int i = 0; i < _tGp; i++) {
			jaPreenchido[i] = 0;	//Resetar a marcacao de preenchido a cada grupo.
		}
		
		int atras = 0;
		for (int posicaoX = _inicioDoGrupo[grupo - 1], vezesMenorOuIgual = -1; posicaoX <= _fimDoGrupo[grupo - 1]; posicaoX++) {	//Pegar cada valor do grupo e verificar quantas vezes ele é menor ou igual.
			for (int comparandoXcomEssaPosicao = _inicioDoGrupo[grupo - 1]; comparandoXcomEssaPosicao <= _fimDoGrupo[grupo - 1]; comparandoXcomEssaPosicao++) {	//A verificacao do "<=" acontece em todo o grupo, inclusive ele mesmo, mas nao eh considerado, por isso eh declarado como -1.
				if (_vetPrinc[posicaoX] <= _vetPrinc[comparandoXcomEssaPosicao]) vezesMenorOuIgual++;
			}

			for (; jaPreenchido[vezesMenorOuIgual - atras] == 1; atras++);	//Se a pretendida posicao ja estoiver sendo usada, ir uma posicao para tras, e assim segue ateh encontrar uma que esta vazia.

			jaPreenchido[vezesMenorOuIgual - atras] = 1;	//Marcar que essa posicao esta sendo preenchida.
			ordemInternoGrupo[vezesMenorOuIgual - atras] = _vetPrinc[posicaoX];	//O valor do grupo que esta sendo verificado, sera armazenado na posicao "<=" porque isso eh unico, por exemplo: 0 sempre sera o maior, pois ele nao é menor que mais ninguem.
			
			if (INFORMACOES[2]) {
				antigaPosicaoDaOrdemInterna[vezesMenorOuIgual - atras] = posicaoX + 1;	//Soh para saber de onde veio o valor.
				cout << "Posicao ~" << posicaoX + 1 << "~ (grupo " << grupo << ") : " << _vetPrinc[posicaoX] << "\n";
			}

			vezesMenorOuIgual = -1;	//Reinicia para armazenar o "<=" da nova posicao do grupo.
			atras = 0;
		}

		if (INFORMACOES[2]) {
			cout << "Ordem interna:\t";
			for (int i = 0; i < _tGp; i++) {
				cout << antigaPosicaoDaOrdemInterna[i] << " ";
			}
			cout << "\n\n";
		}

		if (_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor < 0) {
			grupoEsvaziado = 1;
			_menorDoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor] = -9999999;
		}
		else _menorDoGrupo[grupo - 1] = ordemInternoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor];	//O menor do grupo sempre sera o da ultima posicao, por exemplo: 2(se o tamanhos do grupo for 3), 0(se o tamanho do grupo for 1, nesse caso o maior do grupo sera igual).
		_maiorDoGrupo[grupo - 1] = ordemInternoGrupo[0];	//O maior de todos, nao eh menor que nenhum outro(obvio), portanto, ele SEMPRE sera zero, nao ha necessidade de calculos.
	} 

	delete[] ordemInternoGrupo;
	delete[] jaPreenchido;
	delete[] antigaPosicaoDaOrdemInterna;
}

//------------------------------------------------------------------//

//Mostrar o conteudo do grupo---------------------------------------//

void mostrarGrupo(int grupo) {
	for (int i = _inicioDoGrupo[grupo - 1]; i <= _fimDoGrupo[grupo - 1]; i++) {
		cout << _vetPrinc[i] << ";";

	}
}

//------------------------------------------------------------------//

//Realizar a troca dos vetores--------------------------------------//

void levarMenoresAteVetSecon(void) {
	for (int i = 0, j = 0, grupo = 1; i < _tVt; i++) {
		_vetSecon[i] = _menorDoGrupo[grupo - 1];
		grupo++;
		if (grupo > _totalGrupos - grupoEsvaziado) {
			grupo = 1;
			j++;
			bool bk = INFORMACOES[2];
			INFORMACOES[2] = false;
			encontrarMenorEMaior(j);
			INFORMACOES[2] = bk;
		}
	}
}

//------------------------------------------------------------------//

//Gerador de números aleatórios-------------------------------------//

mt19937 gen(9); // Mersenne Twister 19937 é um bom gerador padrao
uniform_int_distribution<int> distribution(-10, 10);

//------------------------------------------------------------------//

int main() {
	if (testeErro() == 1) return 1;
	int _passo = 1;
	int _repetir = 10;

	int* _definirVetor = new int[_tVt]{
		//10, 10, 9, 7, 7, 7, 5, 4, 2, 6, 1	Vetor principal, onde os numeros a ser ordenados virao.
	};

	for (int i = 0; i < _tVt; i++) {	//Colocar numeros aleatorios no vetor.
		_definirVetor[i] = distribution(gen);
	}
	/*
	*/

	for (int i = 0; i < _tVt; i++) {	//Pegar o vetor digitado pelo usuario e passar para o vetor dos calculos.
		_vetPrinc[i] = _definirVetor[i];
	}
	delete[] _definirVetor;

	if (INFORMACOES[0]) {
		cout
			<< "Tamanho do vetor: " << _tVt
			<< "\nTamanho maximo dos grupos: " << _tGp
			<< "\n----------------------------"
			<< "\nGrupos inteiros : " << _qntsGruposInt
			<< "\nGrupos nao inteiros: " << _qntsGruposNaoInt
			<< "\nTotal de grupos: " << _totalGrupos
			<< "\nTamanho do grupo nao inteiro: " << _tamanhoDoGrupoNaoInt
			<< "\n----------------------------\n\n";
	}

	encontrarLimites();
	std::chrono::high_resolution_clock::time_point startTime = std::chrono::high_resolution_clock::now();
	while (_repetir > 0) {
		if (INFORMACOES[4]) cout << "_-_-_-_-_-_- PASSO " << _passo << ": _-_-_-_-_-_-\n\n";
		encontrarMenorEMaior(0);

		if (INFORMACOES[1]) {
			cout << "----------------------------\n\n";
			for (int grupo = 1; grupo <= _totalGrupos; grupo++) {
				cout
					<< "~ ~ ~ ~ Grupo " << grupo << ": ~ ~ ~ ~\n";
				mostrarGrupo(grupo);
				cout
					<< "\nInicio: " << _inicioDoGrupo[grupo - 1] << "\tFim: " << _fimDoGrupo[grupo - 1]
					<< "\nMenor: " << _menorDoGrupo[grupo - 1] << "\tMaior: " << _maiorDoGrupo[grupo - 1]
					<< "\n\n";
			}
			cout << "----------------------------\n\n";
		}

		levarMenoresAteVetSecon();
		if (INFORMACOES[3]) {
			for (int i = 0; i < _tVt; i++) {
				cout << _vetSecon[i] << " ";
			}
			cout << "\n\n";
		}


		for (int i = 0; i < _tVt; i++) {
			_vetPrinc[i] = _vetSecon[i];
		}

		// cout << "\n\nRepetir: ";
		// cin >> _repetir;
		_repetir--;
		_passo++;
	}
	std::chrono::high_resolution_clock::time_point endTime = std::chrono::high_resolution_clock::now();
	auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

	std::cout << "Tempo de execucao: " << duration << " ms" << std::endl;
	

	cout << "\n\nFinalizado\n\n";
}

int testeErro(void) {
	bool comErro = 0;
	int tgp = _tGp;
	int tvt = _tVt;

	if (_tamanhoDoGrupoNaoInt > tgp - 1) { cout << "\nGrupo nao-inteiro esta maior que o maximo."; comErro = 1; }
	if (_qntsGruposInt * tgp + _tamanhoDoGrupoNaoInt != tvt) { cout << "\nA somatoria dos grupos interios com os nao-interios nao resulta no tamanho do vetor."; comErro = 1; }
	if (tgp > tvt) { cout << "\nO tamanho do grupo nao pode ser maior que o tamanho do vetor."; comErro = 1; }
		

	return comErro;
}




















#include <iostream>
#include <random>
#include <chrono>
using namespace std;


bool INFORMACOES[]{
	true,			//Tamanho do vetor.
	false,			//Mostrar grupo.
	false,			//Mostrar ordem interna.
	false,			//Mostrar vetor secundario.
	false,			//Mostrar passos.
	true,			//Tempo de execucao
};


//Prototipos das funcoes.-------------------------------------------//

int testeErro(void);
int contarGruposNaoInt(void);
void encontrarLimites(void);
void encontrarMenorEMaior(int);
void mostrarGrupo(int);
void levarMenoresAteVetSecon(void);

//------------------------------------------------------------------//

//Constantes.-------------------------------------------------------//

const int	_tVt = 1000001, //A fins de testes, o tamanho do vetor, e tamanho do grupo sao 11 e 3.
			_tGp = 3;

const int _tamanhoDoGrupoNaoInt = _tVt % _tGp;
/* 11 MOD 3 = 2 */
const int _qntsGruposInt = _tVt / _tGp;
/* 11/3 = 3.666 = 3 */
const bool _qntsGruposNaoInt = contarGruposNaoInt();
/* 1 */
const int _totalGrupos = _qntsGruposInt + _qntsGruposNaoInt;
/* 3 + 1 = 4 */
int contarGruposNaoInt(void) {
	int qntsGruposNaoInt = 1;	//Soh e possivel existir um grupo nao inteiro.
	if (_tamanhoDoGrupoNaoInt == 0)  qntsGruposNaoInt = 0;	//Se o resto da divisao for zero, entao nao existe grupos nao inteiros.
	return qntsGruposNaoInt;
}

//------------------------------------------------------------------//

//Principais variaveis----------------------------------------------//

int* _vetPrinc = new int[_tVt];
int* _vetSecon = new int[_tVt];

//------------------------------------------------------------------//

//Inicio e fim de cada grupo no vetor.------------------------------//
int* _inicioDoGrupo = new int[_totalGrupos];
int* _fimDoGrupo = new int[_totalGrupos];
void encontrarLimites(void) {
	for (int grupo = 1; grupo < _totalGrupos; grupo++) {
		_inicioDoGrupo[grupo-1] = grupo * _tGp - _tGp;
		/* 2 * 3 = 6 - 3 = 3 */
		_fimDoGrupo[grupo-1] = _inicioDoGrupo[grupo-1] + _tGp - 1;
		/* 3 + 3 = 6 - 1 = 5 */
	}
	_inicioDoGrupo[_totalGrupos - 1] = _totalGrupos * _tGp - _tGp;
	/* 4 * 3 = 12 - 3 = 9 */

	if (_tamanhoDoGrupoNaoInt > 0) {
		_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] - 1 + _tamanhoDoGrupoNaoInt;
		/* 9 - 1 = 8 + 1 = 9 */
		return;
	}

	_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] + _tGp - 1;
	/* 9 + 3 = 12 - 1 = 11 */
}

//------------------------------------------------------------------//

//Encontrar maior e menor de cada grupo-----------------------------//

int* _posisaoDoMenorDoGrupo = new int[_totalGrupos];
int* _menorDoGrupo = new int[_totalGrupos];
int* _maiorDoGrupo = new int[_totalGrupos];
int grupoEsvaziado = 0;

void encontrarMenorEMaior(int outroMenor) {
	int* ordemInternoGrupo = new int[_tGp];
	int* jaPreenchido = new int[_tGp];
	int* antigaPosicaoDaOrdemInterna = new int[_tGp];
	grupoEsvaziado = 0;
	
	for (int i = 0; i < _tGp; i++) {
		ordemInternoGrupo[i] = -9999999;
		antigaPosicaoDaOrdemInterna[i] = -9999999;
	}

	for (int grupo = 1; grupo <= _totalGrupos; grupo++) {	//Fazer o codigo abaixo para cada grupo existente.
		for (int i = 0; i < _tGp; i++) {
			jaPreenchido[i] = 0;	//Resetar a marcacao de preenchido a cada grupo.
		}
		
		int atras = 0;
		for (int posicaoX = _inicioDoGrupo[grupo - 1], vezesMenorOuIgual = -1; posicaoX <= _fimDoGrupo[grupo - 1]; posicaoX++) {	//Pegar cada valor do grupo e verificar quantas vezes ele é menor ou igual.
			for (int comparandoXcomEssaPosicao = _inicioDoGrupo[grupo - 1]; comparandoXcomEssaPosicao <= _fimDoGrupo[grupo - 1]; comparandoXcomEssaPosicao++) {	//A verificacao do "<=" acontece em todo o grupo, inclusive ele mesmo, mas nao eh considerado, por isso eh declarado como -1.
				if (_vetPrinc[posicaoX] <= _vetPrinc[comparandoXcomEssaPosicao]) vezesMenorOuIgual++;
			}

			for (; jaPreenchido[vezesMenorOuIgual - atras] == 1; atras++);	//Se a pretendida posicao ja estoiver sendo usada, ir uma posicao para tras, e assim segue ateh encontrar uma que esta vazia.

			jaPreenchido[vezesMenorOuIgual - atras] = 1;	//Marcar que essa posicao esta sendo preenchida.
			ordemInternoGrupo[vezesMenorOuIgual - atras] = _vetPrinc[posicaoX];	//O valor do grupo que esta sendo verificado, sera armazenado na posicao "<=" porque isso eh unico, por exemplo: 0 sempre sera o maior, pois ele nao é menor que mais ninguem.
			
			if (INFORMACOES[2]) {
				antigaPosicaoDaOrdemInterna[vezesMenorOuIgual - atras] = posicaoX + 1;	//Soh para saber de onde veio o valor.
				cout << "Posicao ~" << posicaoX + 1 << "~ (grupo " << grupo << ") : " << _vetPrinc[posicaoX] << "\n";
			}

			vezesMenorOuIgual = -1;	//Reinicia para armazenar o "<=" da nova posicao do grupo.
			atras = 0;
		}

		if (INFORMACOES[2]) {
			cout << "Ordem interna:\t";
			for (int i = 0; i < _tGp; i++) {
				cout << antigaPosicaoDaOrdemInterna[i] << " ";
			}
			cout << "\n\n";
		}

		if (_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor < 0) {
			grupoEsvaziado = 1;
			_menorDoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor] = -9999999;
		}
		else _menorDoGrupo[grupo - 1] = ordemInternoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor];	//O menor do grupo sempre sera o da ultima posicao, por exemplo: 2(se o tamanhos do grupo for 3), 0(se o tamanho do grupo for 1, nesse caso o maior do grupo sera igual).
		_maiorDoGrupo[grupo - 1] = ordemInternoGrupo[0];	//O maior de todos, nao eh menor que nenhum outro(obvio), portanto, ele SEMPRE sera zero, nao ha necessidade de calculos.
	} 

	delete[] ordemInternoGrupo;
	delete[] jaPreenchido;
	delete[] antigaPosicaoDaOrdemInterna;
}

//------------------------------------------------------------------//

//Mostrar o conteudo do grupo---------------------------------------//

void mostrarGrupo(int grupo) {
	for (int i = _inicioDoGrupo[grupo - 1]; i <= _fimDoGrupo[grupo - 1]; i++) {
		cout << _vetPrinc[i] << ";";

	}
}

//------------------------------------------------------------------//

//Realizar a troca dos vetores--------------------------------------//

void levarMenoresAteVetSecon(void) {
	for (int i = 0, j = 0, grupo = 1; i < _tVt; i++) {
		_vetSecon[i] = _menorDoGrupo[grupo - 1];
		grupo++;
		if (grupo > _totalGrupos - grupoEsvaziado) {
			grupo = 1;
			j++;
			bool bk = INFORMACOES[2];
			INFORMACOES[2] = false;
			encontrarMenorEMaior(j);
			INFORMACOES[2] = bk;
		}
	}
}

//------------------------------------------------------------------//

//Gerador de números aleatórios-------------------------------------//

mt19937 gen(9); // Mersenne Twister 19937 é um bom gerador padrao
uniform_int_distribution<int> distribution(-10, 10);

//------------------------------------------------------------------//

int main() {
	if (testeErro() == 1) return 1;
	else cout << "nenhum erro encontrado...\n";
	int _passo = 1;
	int _repetir = 1;

	int* _definirVetor = new int[_tVt]{
		//4, 1, 7, 10, 7, 3, 6, 7, 5, 10, 2	Vetor principal, onde os numeros a ser ordenados virao.
	};
	for (int i = 0; i < _tVt; i++) {	//Colocar numeros aleatorios no vetor.
		_definirVetor[i] = distribution(gen);
	}

	/*
	*/

	for (int i = 0; i < _tVt; i++) {	//Pegar o vetor digitado pelo usuario e passar para o vetor dos calculos.
		_vetPrinc[i] = _definirVetor[i];
	}
	delete[] _definirVetor;

	if (INFORMACOES[0]) {
		cout
			<< "Tamanho do vetor: " << _tVt
			<< "\nTamanho maximo dos grupos: " << _tGp
			<< "\n----------------------------"
			<< "\nGrupos inteiros : " << _qntsGruposInt
			<< "\nGrupos nao inteiros: " << _qntsGruposNaoInt
			<< "\nTotal de grupos: " << _totalGrupos
			<< "\nTamanho do grupo nao inteiro: " << _tamanhoDoGrupoNaoInt
			<< "\n----------------------------\n\n";
	}
	int media = 0;
	int qntsMedia = 0;
	encontrarLimites();
	std::chrono::high_resolution_clock::time_point startTime2 = std::chrono::high_resolution_clock::now();
	while (_repetir > 0) {
		std::chrono::high_resolution_clock::time_point startTime = std::chrono::high_resolution_clock::now();
		if (INFORMACOES[4]) cout << "_-_-_-_-_-_- PASSO " << _passo << ": _-_-_-_-_-_-\n\n";
		encontrarMenorEMaior(0);

		if (INFORMACOES[1]) {
			cout << "----------------------------\n\n";
			for (int grupo = 1; grupo <= _totalGrupos; grupo++) {
				cout
					<< "~ ~ ~ ~ Grupo " << grupo << ": ~ ~ ~ ~\n";
				mostrarGrupo(grupo);
				cout
					<< "\nInicio: " << _inicioDoGrupo[grupo - 1] << "\tFim: " << _fimDoGrupo[grupo - 1]
					<< "\nMenor: " << _menorDoGrupo[grupo - 1] << "\tMaior: " << _maiorDoGrupo[grupo - 1]
					<< "\n\n";
			}
			cout << "----------------------------\n\n";
		}

		levarMenoresAteVetSecon();
		if (INFORMACOES[3]) {
			for (int i = 0; i < _tVt; i++) {
				cout << _vetSecon[i] << " ";
			}
			cout << "\n\n";
		}


		for (int i = 0; i < _tVt; i++) {
			_vetPrinc[i] = _vetSecon[i];
		}

		std::chrono::high_resolution_clock::time_point endTime = std::chrono::high_resolution_clock::now();
		auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
		media += duration;
		qntsMedia++;
		_repetir--;
		if (_repetir <= 0) {
			std::chrono::high_resolution_clock::time_point endTime2 = std::chrono::high_resolution_clock::now();
			auto duration2 = std::chrono::duration_cast<std::chrono::milliseconds>(endTime2 - startTime2).count();
			if (INFORMACOES[5]) {
				std::cout << "Tempo de execucao: " << duration2 << " ms" << std::endl;
				cout << "Media: " << media / qntsMedia << "\n";
				cout << "soma: " << media << " qnts: " << qntsMedia << "\n";
			}
			cout << "\nRepetir: ";
			cin >> _repetir;
			media = 0;
			qntsMedia = 0;
			startTime2 = std::chrono::high_resolution_clock::now();
		}
		_passo++;
	}

	

	cout << "\n\nFinalizado\n\n";
}

int testeErro(void) {
	bool comErro = 0;
	int tgp = _tGp;
	int tvt = _tVt;

	if (_tamanhoDoGrupoNaoInt > tgp - 1) { cout << "\nGrupo nao-inteiro esta maior que o maximo."; comErro = 1; }
	if (_qntsGruposInt * tgp + _tamanhoDoGrupoNaoInt != tvt) { cout << "\nA somatoria dos grupos interios com os nao-interios nao resulta no tamanho do vetor."; comErro = 1; }
	if (tgp > tvt) { cout << "\nO tamanho do grupo nao pode ser maior que o tamanho do vetor."; comErro = 1; }
		

	return comErro;
}



















ANTES DE ALTERAR O ALGORITIMO
#include <iostream>
#include <random>
#include <chrono>
using namespace std;
using namespace chrono;


bool INFORMACOES[]{
	true,			//Tamanho do vetor.
	false,			//Mostrar grupo.
	false,			//Mostrar ordem interna.
	false,			//Mostrar vetor secundario.
	false,			//Mostrar passos.
	true,			//Tempo de execucao
};


//Prototipos das funcoes.-------------------------------------------//

int testeErro(void);
int contarGruposNaoInt(void);
void encontrarLimites(void);
void encontrarMenorEMaior(int);
void mostrarGrupo(int);
void levarMenoresAteVetSecon(void);

//------------------------------------------------------------------//

//Constantes.-------------------------------------------------------//

const int	_tVt = 10005, //A fins de testes, o tamanho do vetor, e tamanho do grupo sao 11 e 3.
			_tGp = 3;

const int _tamanhoDoGrupoNaoInt = _tVt % _tGp;
/* 11 MOD 3 = 2 */
const int _qntsGruposInt = _tVt / _tGp;
/* 11/3 = 3.666 = 3 */
const bool _qntsGruposNaoInt = contarGruposNaoInt();
/* 1 */
const int _totalGrupos = _qntsGruposInt + _qntsGruposNaoInt;
/* 3 + 1 = 4 */
int contarGruposNaoInt(void) {
	int qntsGruposNaoInt = 1;	//Soh e possivel existir um grupo nao inteiro.
	if (_tamanhoDoGrupoNaoInt == 0)  qntsGruposNaoInt = 0;	//Se o resto da divisao for zero, entao nao existe grupos nao inteiros.
	return qntsGruposNaoInt;
}

//------------------------------------------------------------------//

//Principais variaveis----------------------------------------------//

int* _vetPrinc = new int[_tVt];
int* _vetSecon = new int[_tVt];

//------------------------------------------------------------------//

//Inicio e fim de cada grupo no vetor.------------------------------//
int* _inicioDoGrupo = new int[_totalGrupos];
int* _fimDoGrupo = new int[_totalGrupos];
void encontrarLimites(void) {
	for (int grupo = 1; grupo < _totalGrupos; grupo++) {
		_inicioDoGrupo[grupo-1] = grupo * _tGp - _tGp;
		/* 2 * 3 = 6 - 3 = 3 */
		_fimDoGrupo[grupo-1] = _inicioDoGrupo[grupo-1] + _tGp - 1;
		/* 3 + 3 = 6 - 1 = 5 */
	}
	_inicioDoGrupo[_totalGrupos - 1] = _totalGrupos * _tGp - _tGp;
	/* 4 * 3 = 12 - 3 = 9 */

	if (_tamanhoDoGrupoNaoInt > 0) {
		_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] - 1 + _tamanhoDoGrupoNaoInt;
		/* 9 - 1 = 8 + 1 = 9 */
		return;
	}

	_fimDoGrupo[_totalGrupos - 1] = _inicioDoGrupo[_totalGrupos - 1] + _tGp - 1;
	/* 9 + 3 = 12 - 1 = 11 */
}

//------------------------------------------------------------------//

//Encontrar maior e menor de cada grupo-----------------------------//

int* _posisaoDoMenorDoGrupo = new int[_totalGrupos];
int* _menorDoGrupo = new int[_totalGrupos];
int* _maiorDoGrupo = new int[_totalGrupos];
int grupoEsvaziado = 0;

void encontrarMenorEMaior(int outroMenor) {
	int* ordemInternoGrupo = new int[_tGp];
	int* jaPreenchido = new int[_tGp];
	int* antigaPosicaoDaOrdemInterna = new int[_tGp];
	grupoEsvaziado = 0;
	
	for (int i = 0; i < _tGp; i++) {
		ordemInternoGrupo[i] = -9999999;
		antigaPosicaoDaOrdemInterna[i] = -9999999;
	}

	for (int grupo = 1; grupo <= _totalGrupos; grupo++) {	//Fazer o codigo abaixo para cada grupo existente.
		for (int i = 0; i < _tGp; i++) {
			jaPreenchido[i] = 0;	//Resetar a marcacao de preenchido a cada grupo.
		}
		

		for (int posicaoX = _inicioDoGrupo[grupo - 1], vezesMenorOuIgual = -1, atras = 0; posicaoX <= _fimDoGrupo[grupo - 1]; posicaoX++) {	//Pegar cada valor do grupo e verificar quantas vezes ele é menor ou igual.
			for (int comparandoXcomEssaPosicao = _inicioDoGrupo[grupo - 1]; comparandoXcomEssaPosicao <= _fimDoGrupo[grupo - 1]; comparandoXcomEssaPosicao++) {	//A verificacao do "<=" acontece em todo o grupo, inclusive ele mesmo, mas nao eh considerado, por isso eh declarado como -1.
				if (_vetPrinc[posicaoX] <= _vetPrinc[comparandoXcomEssaPosicao]) vezesMenorOuIgual++;
			}

			for (; jaPreenchido[vezesMenorOuIgual - atras] == 1; atras++);	//Se a pretendida posicao ja estoiver sendo usada, ir uma posicao para tras, e assim segue ateh encontrar uma que esta vazia.

			jaPreenchido[vezesMenorOuIgual - atras] = 1;	//Marcar que essa posicao esta sendo preenchida.
			ordemInternoGrupo[vezesMenorOuIgual - atras] = _vetPrinc[posicaoX];	//O valor do grupo que esta sendo verificado, sera armazenado na posicao "<=" porque isso eh unico, por exemplo: 0 sempre sera o maior, pois ele nao é menor que mais ninguem.
			
			if (INFORMACOES[2]) {
				antigaPosicaoDaOrdemInterna[vezesMenorOuIgual - atras] = posicaoX + 1;	//Soh para saber de onde veio o valor.
				cout << "Posicao ~" << posicaoX + 1 << "~ (grupo " << grupo << ") : " << _vetPrinc[posicaoX] << "\n";
			}

			vezesMenorOuIgual = -1;	//Reinicia para armazenar o "<=" da nova posicao do grupo.
			atras = 0;
		}

		if (INFORMACOES[2]) {
			cout << "Ordem interna:\t";
			for (int i = 0; i < _tGp; i++) {
				cout << antigaPosicaoDaOrdemInterna[i] << " ";
			}
			cout << "\n\n";
		}

		if (_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor < 0) {
			grupoEsvaziado = 1;
			_menorDoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor] = -9999999;
		}
		else _menorDoGrupo[grupo - 1] = ordemInternoGrupo[_fimDoGrupo[grupo - 1] - _inicioDoGrupo[grupo - 1] - outroMenor];	//O menor do grupo sempre sera o da ultima posicao, por exemplo: 2(se o tamanhos do grupo for 3), 0(se o tamanho do grupo for 1, nesse caso o maior do grupo sera igual).
		_maiorDoGrupo[grupo - 1] = ordemInternoGrupo[0];	//O maior de todos, nao eh menor que nenhum outro(obvio), portanto, ele SEMPRE sera zero, nao ha necessidade de calculos.
	} 

	delete[] ordemInternoGrupo;
	delete[] jaPreenchido;
	delete[] antigaPosicaoDaOrdemInterna;
}

//------------------------------------------------------------------//

//Mostrar o conteudo do grupo---------------------------------------//

void mostrarGrupo(int grupo) {
	for (int i = _inicioDoGrupo[grupo - 1]; i <= _fimDoGrupo[grupo - 1]; i++) {
		cout << _vetPrinc[i] << ";";

	}
}

//------------------------------------------------------------------//

//Realizar a troca dos vetores--------------------------------------//

void levarMenoresAteVetSecon(void) {
	for (int i = 0, j = 0, grupo = 1; i < _tVt; i++) {
		_vetSecon[i] = _menorDoGrupo[grupo - 1];
		grupo++;
		if (grupo > _totalGrupos - grupoEsvaziado) {
			grupo = 1;
			j++;
			bool bk = INFORMACOES[2];
			INFORMACOES[2] = false;
			encontrarMenorEMaior(j);
			INFORMACOES[2] = bk;
		}
	}
}

//------------------------------------------------------------------//

//Gerador de números aleatórios-------------------------------------//

mt19937 gen(9); // Mersenne Twister 19937 é um bom gerador padrao
uniform_int_distribution<int> distribution(-10, 10);

//------------------------------------------------------------------//

int main() {
	if (testeErro() == 1) return 1;
	int _passo = 1;
	int _repetir = 1;

	int* _definirVetor = new int[_tVt]{
		//4, 1, 7, 10, 7, 3, 6, 7, 5, 10, 2	Vetor principal, onde os numeros a ser ordenados virao.
	};
	for (int i = 0; i < _tVt; i++) {	//Colocar numeros aleatorios no vetor.
		_definirVetor[i] = distribution(gen);
	}

	/*
	*/

	for (int i = 0; i < _tVt; i++) {	//Pegar o vetor digitado pelo usuario e passar para o vetor dos calculos.
		_vetPrinc[i] = _definirVetor[i];
	}
	delete[] _definirVetor;

	if (INFORMACOES[0]) {
		cout
			<< "Tamanho do vetor: " << _tVt
			<< "\nTamanho maximo dos grupos: " << _tGp
			<< "\n----------------------------"
			<< "\nGrupos inteiros : " << _qntsGruposInt
			<< "\nGrupos nao inteiros: " << _qntsGruposNaoInt
			<< "\nTotal de grupos: " << _totalGrupos
			<< "\nTamanho do grupo nao inteiro: " << _tamanhoDoGrupoNaoInt
			<< "\n----------------------------\n\n";
	}
	encontrarLimites();
	high_resolution_clock::time_point startTime2 = high_resolution_clock::now();
	int _qnts = _repetir;
	while (_repetir > 0) {
		if (INFORMACOES[4]) cout << "_-_-_-_-_-_- PASSO " << _passo << ": _-_-_-_-_-_-\n\n";
		encontrarMenorEMaior(0);

		if (INFORMACOES[1]) {
			cout << "----------------------------\n\n";
			for (int grupo = 1; grupo <= _totalGrupos; grupo++) {
				cout
					<< "~ ~ ~ ~ Grupo " << grupo << ": ~ ~ ~ ~\n";
				mostrarGrupo(grupo);
				cout
					<< "\nInicio: " << _inicioDoGrupo[grupo - 1] << "\tFim: " << _fimDoGrupo[grupo - 1]
					<< "\nMenor: " << _menorDoGrupo[grupo - 1] << "\tMaior: " << _maiorDoGrupo[grupo - 1]
					<< "\n\n";
			}
			cout << "----------------------------\n\n";
		}

		levarMenoresAteVetSecon();
		if (INFORMACOES[3]) {
			for (int i = 0; i < _tVt; i++) {
				cout << _vetSecon[i] << " ";
			}
			cout << "\n\n";
		}


		for (int i = 0; i < _tVt; i++) {
			_vetPrinc[i] = _vetSecon[i];
		}

		_repetir--;
		if (_repetir <= 0) {
			high_resolution_clock::time_point endTime2 = high_resolution_clock::now();
			auto duration2 = duration_cast<milliseconds>(endTime2 - startTime2).count();
			if (INFORMACOES[5]) {
				cout << "Tempo de execucao: " << duration2 << " ms" << endl;
				cout << "Media: " << duration2 / _qnts << "\n";
			}
			cout << "\nRepetir: ";
			cin >> _repetir;
			_qnts = _repetir;
			startTime2 = high_resolution_clock::now();
		}
		_passo++;
	}

	

	cout << "\n\nFinalizado\n\n";
}

int testeErro(void) {
	bool comErro = 0;
	int tgp = _tGp;
	int tvt = _tVt;

	if (_tamanhoDoGrupoNaoInt > tgp - 1) { cout << "\nGrupo nao-inteiro esta maior que o maximo."; comErro = 1; }
	if (_qntsGruposInt * tgp + _tamanhoDoGrupoNaoInt != tvt) { cout << "\nA somatoria dos grupos interios com os nao-interios nao resulta no tamanho do vetor."; comErro = 1; }
	if (tgp > tvt) { cout << "\nO tamanho do grupo nao pode ser maior que o tamanho do vetor."; comErro = 1; }
		

	return comErro;
}










